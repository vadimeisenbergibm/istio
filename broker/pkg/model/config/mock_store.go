// Automatically generated by MockGen. DO NOT EDIT!
// Source: broker/pkg/model/config/store.go

package config

import (
	gomock "github.com/golang/mock/gomock"

	config "istio.io/api/broker/v1/config"
)

// Mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *_MockStoreRecorder
}

// Recorder for MockStore (not exported)
type _MockStoreRecorder struct {
	mock *MockStore
}

func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &_MockStoreRecorder{mock}
	return mock
}

func (_m *MockStore) EXPECT() *_MockStoreRecorder {
	return _m.recorder
}

func (_m *MockStore) Descriptor() Descriptor {
	ret := _m.ctrl.Call(_m, "Descriptor")
	ret0, _ := ret[0].(Descriptor)
	return ret0
}

func (_mr *_MockStoreRecorder) Descriptor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Descriptor")
}

func (_m *MockStore) Get(typ string, name string, namespace string) (*Entry, bool) {
	ret := _m.ctrl.Call(_m, "Get", typ, name, namespace)
	ret0, _ := ret[0].(*Entry)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockStore) List(typ string, namespace string) ([]Entry, error) {
	ret := _m.ctrl.Call(_m, "List", typ, namespace)
	ret0, _ := ret[0].([]Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", arg0, arg1)
}

func (_m *MockStore) Create(entry Entry) (string, error) {
	ret := _m.ctrl.Call(_m, "Create", entry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockStore) Update(entry Entry) (string, error) {
	ret := _m.ctrl.Call(_m, "Update", entry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}

func (_m *MockStore) Delete(typ string, name string, namespace string) error {
	ret := _m.ctrl.Call(_m, "Delete", typ, name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1, arg2)
}

// Mock of BrokerConfigStore interface
type MockBrokerConfigStore struct {
	ctrl     *gomock.Controller
	recorder *_MockBrokerConfigStoreRecorder
}

// Recorder for MockBrokerConfigStore (not exported)
type _MockBrokerConfigStoreRecorder struct {
	mock *MockBrokerConfigStore
}

func NewMockBrokerConfigStore(ctrl *gomock.Controller) *MockBrokerConfigStore {
	mock := &MockBrokerConfigStore{ctrl: ctrl}
	mock.recorder = &_MockBrokerConfigStoreRecorder{mock}
	return mock
}

func (_m *MockBrokerConfigStore) EXPECT() *_MockBrokerConfigStoreRecorder {
	return _m.recorder
}

func (_m *MockBrokerConfigStore) ServiceClasses() map[string]*config.ServiceClass {
	ret := _m.ctrl.Call(_m, "ServiceClasses")
	ret0, _ := ret[0].(map[string]*config.ServiceClass)
	return ret0
}

func (_mr *_MockBrokerConfigStoreRecorder) ServiceClasses() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServiceClasses")
}

func (_m *MockBrokerConfigStore) ServicePlans() map[string]*config.ServicePlan {
	ret := _m.ctrl.Call(_m, "ServicePlans")
	ret0, _ := ret[0].(map[string]*config.ServicePlan)
	return ret0
}

func (_mr *_MockBrokerConfigStoreRecorder) ServicePlans() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServicePlans")
}

func (_m *MockBrokerConfigStore) ServicePlansByService(service string) map[string]*config.ServicePlan {
	ret := _m.ctrl.Call(_m, "ServicePlansByService", service)
	ret0, _ := ret[0].(map[string]*config.ServicePlan)
	return ret0
}

func (_mr *_MockBrokerConfigStoreRecorder) ServicePlansByService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServicePlansByService", arg0)
}
